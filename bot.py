import discord
from discord.ext import commands
from discord import app_commands
import os
import random

intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

# –í–∞—à–∏ ID
ALLOWED_ROLE_IDS = [1323420440919670908, 1330492203969282129]  # –†–æ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Å–æ–≤
FLIGHT_CHANNEL_ID = 1385932180005458011  # –ö–∞–Ω–∞–ª –¥–ª—è —Ä–µ–π—Å–æ–≤

ROLE_CONFIG = {
    "pilot": {"label": "–ü–∏–ª–æ—Ç", "emoji": "‚úà", "limit": 1},
    "copilot": {"label": "–ö–æ-–ø–∏–ª–æ—Ç", "emoji": "‚úà", "limit": 1},
    "dispatcher": {"label": "–î–∏—Å–ø–µ—Ç—á–µ—Ä", "emoji": "üéß", "limit": 2},
    "ground": {"label": "–ù–∞–∑–µ–º–Ω–∞—è —Å–ª—É–∂–±–∞", "emoji": "üö®", "limit": 5},
    "steward": {"label": "–°—Ç—é–∞—Ä–¥", "emoji": "üöª", "limit": 3},
    "passenger": {"label": "–ü–∞—Å—Å–∞–∂–∏—Ä", "emoji": "üß≥", "limit": None},
}

active_flights = {}

class RoleView(discord.ui.View):
    def __init__(self, flight_id):
        super().__init__(timeout=None)
        self.flight_id = flight_id
        self.update_buttons()

    def update_buttons(self):
        self.clear_items()
        for key, info in ROLE_CONFIG.items():
            self.add_item(self.RoleButton(key))
        self.add_item(self.CancelButton())

    class RoleButton(discord.ui.Button):
        def __init__(self, role_key):
            info = ROLE_CONFIG[role_key]
            super().__init__(
                label=info["label"],
                emoji=info["emoji"],
                style=discord.ButtonStyle.primary,
                custom_id=f"role_{role_key}"
            )
            self.role_key = role_key

        async def callback(self, interaction: discord.Interaction):
            flight = next((f for f in active_flights.values() if f["id"] == self.view.flight_id), None)
            if not flight:
                return await interaction.response.send_message("–†–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
            
            if interaction.user.id in flight["users"]:
                if flight["users"][interaction.user.id] == self.role_key:
                    return await interaction.response.send_message("–í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ —ç—Ç—É —Ä–æ–ª—å.", ephemeral=True)
            
            if ROLE_CONFIG[self.role_key]["limit"] and len(flight["roles"][self.role_key]) >= ROLE_CONFIG[self.role_key]["limit"]:
                return await interaction.response.send_message("–õ–∏–º–∏—Ç –Ω–∞ —ç—Ç—É —Ä–æ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.", ephemeral=True)

            if interaction.user.id in flight["users"]:
                old_role = flight["users"][interaction.user.id]
                flight["roles"][old_role].remove(interaction.user.mention)
            
            flight["roles"][self.role_key].append(interaction.user.mention)
            flight["users"][interaction.user.id] = self.role_key
            
            await interaction.message.edit(embed=generate_embed(flight), view=RoleView(flight["id"]))
            await interaction.response.send_message(f"–¢–µ–ø–µ—Ä—å –≤—ã {ROLE_CONFIG[self.role_key]['label']}!", ephemeral=True)

    class CancelButton(discord.ui.Button):
        def __init__(self):
            super().__init__(
                label="–û—Ç–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å",
                emoji="‚ùå",
                style=discord.ButtonStyle.danger,
                custom_id="cancel_role"
            )

        async def callback(self, interaction: discord.Interaction):
            flight = next((f for f in active_flights.values() if interaction.user.id in f["users"]), None)
            if not flight:
                return await interaction.response.send_message("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–µ–π—Å–µ.", ephemeral=True)
            
            role = flight["users"].pop(interaction.user.id)
            flight["roles"][role].remove(interaction.user.mention)
            
            await flight["message"].edit(embed=generate_embed(flight), view=RoleView(flight["id"]))
            await interaction.response.send_message("–í—ã –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–µ–π—Å–µ.", ephemeral=True)

def generate_embed(flight):
    info = (
        f"**–û—Ç–∫—É–¥–∞:** {flight['from']}\n"
        f"**–ö—É–¥–∞:** {flight['to']}\n"
        f"**–ü–µ—Ä–µ—Å–∞–¥–∫–∞:** {flight['transfer']}\n"
        f"**–ó–∞–ø–∞—Å–Ω–æ–π –∞—ç—Ä–æ–ø–æ—Ä—Ç:** {flight['alt']}\n"
        f"**–í—Ä–µ–º—è:** {flight['time']}\n"
        f"**–ì–µ–π—Ç:** {flight['gate']}\n\n"
    )
    roles = "\n".join([f"{ROLE_CONFIG[k]['emoji']} {ROLE_CONFIG[k]['label']}: {', '.join(v) if v else '–Ω–µ—Ç'}"
                      for k, v in flight["roles"].items()])
    embed = discord.Embed(title=f"üõ´ –†–µ–π—Å {flight['id']}", description=info + roles, color=0x3498db)
    embed.set_footer(text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏")
    return embed

@bot.tree.command(name="—Ä–µ–π—Å", description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–π—Å")
@app_commands.describe(
    departure="–û—Ç–∫—É–¥–∞ –≤—ã–ª–µ—Ç–∞–µ–º",
    arrival="–ö—É–¥–∞ –ø—Ä–∏–ª–µ—Ç–∞–µ–º",
    transfer="–ü–µ—Ä–µ—Å–∞–¥–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)",
    alternate="–ó–∞–ø–∞—Å–Ω–æ–π –∞—ç—Ä–æ–ø–æ—Ä—Ç",
    time="–í—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞",
    gate="–ù–æ–º–µ—Ä –≥–µ–π—Ç–∞"
)
async def create_flight(interaction: discord.Interaction, 
                      departure: str, 
                      arrival: str, 
                      transfer: str, 
                      alternate: str, 
                      time: str, 
                      gate: str):
    try:
        if not any(role.id in ALLOWED_ROLE_IDS for role in interaction.user.roles):
            return await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Å–æ–≤!", ephemeral=True)

        await interaction.response.defer(ephemeral=True)

        flight_id = random.randint(1000, 9999)
        channel = bot.get_channel(FLIGHT_CHANNEL_ID)
        
        if not channel:
            return await interaction.followup.send("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è —Ä–µ–π—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)

        flight_data = {
            "id": flight_id,
            "from": departure,
            "to": arrival,
            "transfer": transfer,
            "alt": alternate,
            "time": time,
            "gate": gate,
            "roles": {k: [] for k in ROLE_CONFIG},
            "users": {}
        }

        view = RoleView(flight_id)
        msg = await channel.send(
            content=f"‚úàÔ∏è @everyone\n{interaction.user.mention} —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π —Ä–µ–π—Å!",
            embed=generate_embed(flight_data),
            view=view
        )

        flight_data["message"] = msg
        active_flights[msg.id] = flight_data

        await interaction.followup.send(f"‚úÖ –†–µ–π—Å {flight_id} —Å–æ–∑–¥–∞–Ω –≤ {channel.mention}!", ephemeral=True)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–π—Å–∞: {e}", ephemeral=True)

@bot.tree.command(name="–∞–∫—Ç–∏–≤–Ω—ã–µ", description="–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–π—Å—ã")
async def show_active(interaction: discord.Interaction):
    try:
        if not active_flights:
            return await interaction.response.send_message("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π—Å–æ–≤.", ephemeral=True)

        await interaction.response.defer(ephemeral=True)
        
        flights_list = []
        for flight in active_flights.values():
            flights_list.append(
                f"**–†–µ–π—Å {flight['id']}**\n"
                f"üõ´ {flight['from']} ‚Üí {flight['to']}\n"
                f"‚è∞ {flight['time']} | üö™ {flight['gate']}\n"
            )

        embed = discord.Embed(
            title="‚úàÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–π—Å—ã",
            description="\n".join(flights_list),
            color=0x3498db
        )
        
        await interaction.followup.send(embed=embed, ephemeral=True)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

@bot.event
async def on_ready():
    print(f"–ë–æ—Ç {bot.user} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    try:
        synced = await bot.tree.sync()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

bot.run(os.getenv("TOKEN"))
