import discord
from discord.ext import commands
from discord import app_commands
import os
import random
import asyncio

intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

# –í–∞—à–∏ ID
ALLOWED_ROLE_IDS = [1323420440919670908, 1330492203969282129]  # –†–æ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Å–æ–≤
FLIGHT_CHANNEL_ID = 1385932180005458011  # –ö–∞–Ω–∞–ª –¥–ª—è —Ä–µ–π—Å–æ–≤

ROLE_CONFIG = {
    "pilot": {"label": "–ü–∏–ª–æ—Ç", "emoji": "‚úàÔ∏è", "limit": 1},
    "copilot": {"label": "–ö–æ-–ø–∏–ª–æ—Ç", "emoji": "‚úàÔ∏è", "limit": 1},
    "dispatcher": {"label": "–î–∏—Å–ø–µ—Ç—á–µ—Ä", "emoji": "üéß", "limit": 2},
    "ground": {"label": "–ù–∞–∑–µ–º–Ω–∞—è —Å–ª—É–∂–±–∞", "emoji": "üö®", "limit": 5},
    "steward": {"label": "–°—Ç—é–∞—Ä–¥", "emoji": "üöª", "limit": 3},
    "passenger": {"label": "–ü–∞—Å—Å–∞–∂–∏—Ä", "emoji": "üß≥", "limit": None},
}

active_flights = {}

class RoleView(discord.ui.View):
    def __init__(self, flight_id):
        super().__init__(timeout=None)
        self.flight_id = flight_id
        self.update_buttons()

    def update_buttons(self):
        self.clear_items()
        for key, info in ROLE_CONFIG.items():
            self.add_item(self.RoleButton(key))
        self.add_item(self.CancelButton())

    class RoleButton(discord.ui.Button):
        def __init__(self, role_key):
            info = ROLE_CONFIG[role_key]
            super().__init__(label=info["label"], emoji=info["emoji"], style=discord.ButtonStyle.primary)
            self.role_key = role_key

        async def callback(self, interaction: discord.Interaction):
            flight = next((f for f in active_flights.values() if f["id"] == self.view.flight_id), None)
            
            if not flight:
                return await interaction.response.send_message("–†–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)

            if interaction.user.id in flight["users"]:
                return await interaction.response.send_message("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", ephemeral=True)

            if ROLE_CONFIG[self.role_key]["limit"] and len(flight["roles"][self.role_key]) >= ROLE_CONFIG[self.role_key]["limit"]:
                return await interaction.response.send_message("–ú–µ—Å—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç.", ephemeral=True)

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ä–æ–ª–µ–π
            for r, users in flight["roles"].items():
                if interaction.user.mention in users:
                    users.remove(interaction.user.mention)
                    flight["users"].pop(interaction.user.id, None)

            flight["roles"][self.role_key].append(interaction.user.mention)
            flight["users"][interaction.user.id] = self.role_key
            await interaction.message.edit(embed=generate_embed(flight), view=RoleView(flight["id"]))
            await interaction.response.send_message(f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫ {ROLE_CONFIG[self.role_key]['label']}.", ephemeral=True)

    class CancelButton(discord.ui.Button):
        def __init__(self):
            super().__init__(label="–û—Ç–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", emoji="‚õîÔ∏è", style=discord.ButtonStyle.danger)

        async def callback(self, interaction: discord.Interaction):
            flight = next((f for f in active_flights.values() if interaction.user.id in f["users"]), None)
            
            if not flight:
                return await interaction.response.send_message("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", ephemeral=True)

            role = flight["users"].pop(interaction.user.id)
            flight["roles"][role].remove(interaction.user.mention)
            await flight["message"].edit(embed=generate_embed(flight), view=RoleView(flight["id"]))
            await interaction.response.send_message("–í–∞—à–∞ —Ä–æ–ª—å —É–¥–∞–ª–µ–Ω–∞.", ephemeral=True)

def generate_embed(flight):
    info = (
        f"**–û—Ç–∫—É–¥–∞:** {flight['from']}\n"
        f"**–ö—É–¥–∞:** {flight['to']}\n"
        f"**–ü–µ—Ä–µ—Å–∞–¥–∫–∞:** {flight['transfer']}\n"
        f"**–ó–∞–ø–∞—Å–Ω–æ–π –∞—ç—Ä–æ–ø–æ—Ä—Ç:** {flight['alt']}\n"
        f"**–í—Ä–µ–º—è:** {flight['time']}\n"
        f"**–ì–µ–π—Ç:** {flight['gate']}\n\n"
    )
    roles = "\n".join([f"{ROLE_CONFIG[k]['emoji']} {ROLE_CONFIG[k]['label']}: {', '.join(v) if v else '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'}"
                      for k, v in flight["roles"].items()])
    embed = discord.Embed(title=f"üõ´ –†–µ–π—Å {flight['id']}", description=info + roles, color=discord.Color.blue())
    embed.set_footer(text="–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ")
    return embed

@bot.tree.command(name="—Å–æ–∑–¥–∞—Ç—å_—Ä–µ–π—Å", description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–π—Å")
@app_commands.describe(
    departure="–ê—ç—Ä–æ–ø–æ—Ä—Ç –≤—ã–ª–µ—Ç–∞",
    arrival="–ê—ç—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–±—ã—Ç–∏—è",
    transfer="–ü–µ—Ä–µ—Å–∞–¥–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)",
    alternate="–ó–∞–ø–∞—Å–Ω–æ–π –∞—ç—Ä–æ–ø–æ—Ä—Ç",
    time="–í—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞",
    gate="–ù–æ–º–µ—Ä –≥–µ–π—Ç–∞"
)
async def create_flight(interaction: discord.Interaction, 
                      departure: str, 
                      arrival: str, 
                      transfer: str, 
                      alternate: str, 
                      time: str, 
                      gate: str):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        if not any(role.id in ALLOWED_ROLE_IDS for role in interation.user.roles):
            return await interation.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–π—Å–æ–≤!", ephemeral=True)

        # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞
        await interation.response.send_message("üõ† –°–æ–∑–¥–∞—é —Ä–µ–π—Å...", ephemeral=True)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Ä–µ–π—Å–∞
        flight_id = random.randint(1000, 9999)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è —Ä–µ–π—Å–æ–≤
        channel = bot.get_channel(FLIGHT_CHANNEL_ID)
        if not channel:
            return await interation.followup.send("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è —Ä–µ–π—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–π—Å–µ
        flight_data = {
            "id": flight_id,
            "from": departure,
            "to": arrival,
            "transfer": transfer,
            "alt": alternate,
            "time": time,
            "gate": gate,
            "roles": {k: [] for k in ROLE_CONFIG},
            "users": {}
        }

        embed = generate_embed(flight_data)
        view = RoleView(flight_id)
        
        msg = await channel.send(
            content=f"‚úàÔ∏è @everyone\n{interation.user.mention} —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π —Ä–µ–π—Å!",
            embed=embed,
            view=view
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        flight_data["message"] = msg
        active_flights[msg.id] = flight_data
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await interation.followup.send(
            f"‚úÖ –†–µ–π—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            f"**ID:** {flight_id}\n"
            f"**–ú–∞—Ä—à—Ä—É—Ç:** {departure} ‚Üí {arrival}",
            ephemeral=True
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–π—Å–∞: {e}")
        await interation.followup.send(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–π—Å–∞:\n{e}",
            ephemeral=True
        )

@bot.tree.command(name="–∞–∫—Ç–∏–≤–Ω—ã–µ_—Ä–µ–π—Å—ã", description="–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–π—Å—ã")
async def show_active_flights(interaction: discord.Interaction):
    try:
        if not active_flights:
            return await interaction.response.send_message("‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π—Å–æ–≤.", ephemeral=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–π—Å–æ–≤
        flights_info = []
        for flight in active_flights.values():
            flights_info.append(
                f"**–†–µ–π—Å {flight['id']}**\n"
                f"üõ´ {flight['from']} ‚Üí üõ¨ {flight['to']}\n"
                f"‚è± {flight['time']} | üö™ {flight['gate']}\n"
            )

        embed = discord.Embed(
            title="‚úàÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–π—Å—ã",
            description="\n".join(flights_info),
            color=discord.Color.blue()
        )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π—Å–æ–≤: {e}")
        await interaction.response.send_message(
            f"‚ùå –û—à–∏–±–∫–∞:\n{e}",
            ephemeral=True
        )

@bot.event
async def on_ready():
    print(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")
    try:
        synced = await bot.tree.sync()
        print(f"üîÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run(os.getenv("TOKEN"))
